import html
import typing


class HtmlElement:
    def __init__(self, attrs: dict[str, str | None] = {}) -> None:
        self.attrs = dict(attrs)
        self.tag = self.__class__.__name__.lower()
        if self.tag != "html":
            self.tag = self.tag.removeprefix("html")
        self.children: list[HtmlElement | str] = []

    # brave misuse of __getitem__ from https://github.com/tavisrudd/throw_out_your_templates
    def __getitem__(self, children) -> typing.Self:
        if not isinstance(children, (tuple, list)):
            children = [children]
        for child in children:
            if child is not None:
                self.children.append(child)
        return self

    def opentag(self) -> str:
        opentag_list = [f"<{self.tag}"]
        for k, v in sorted(self.attrs.items()):
            match v:
                case None:
                    attr_text = k
                case _:
                    attr_text = f'{k}="{html.escape(str(v),quote=True)}"'
            opentag_list.append(attr_text)
        return f"{' '.join(opentag_list)}>"

    def closetag(self) -> str:
        return f"</{self.tag}>"

    def chunks(self, *, indent: str | None = None) -> typing.Generator[str, None, None]:
        if indent is None:
            indent = ""
        opentag = self.opentag()
        closetag = self.closetag()
        match self.children:
            case []:
                yield f"{opentag}{closetag}"
            case [str() as text]:
                yield f"{opentag}{html.escape(text)}{closetag}"
            case _:
                yield opentag
                for child in self.children:
                    match child:
                        case str():
                            yield indent + html.escape(child)
                        case HtmlElement():
                            for childstr in child.chunks(indent=indent):
                                yield indent + childstr
                yield closetag


class HtmlVoidElement(HtmlElement):
    def __getitem__(self, children) -> typing.Self:
        raise ValueError("HTML void elements may not have children")

    def closetag(self) -> str:
        return ""


# fmt: off
class A(HtmlElement): ...
class Abbr(HtmlElement): ...
class Address(HtmlElement): ...
class Article(HtmlElement): ...
class Aside(HtmlElement): ...
class Audio(HtmlElement): ...
class B(HtmlElement): ...
class Bdi(HtmlElement): ...
class Bdo(HtmlElement): ...
class Blockquote(HtmlElement): ...
class Body(HtmlElement): ...
class Button(HtmlElement): ...
class Canvas(HtmlElement): ...
class Caption(HtmlElement): ...
class Cite(HtmlElement): ...
class Code(HtmlElement): ...
class Colgroup(HtmlElement): ...
class Data(HtmlElement): ...
class Datalist(HtmlElement): ...
class Dd(HtmlElement): ...
class Del(HtmlElement): ...
class Details(HtmlElement): ...
class Dfn(HtmlElement): ...
class Dialog(HtmlElement): ...
class Div(HtmlElement): ...
class Dl(HtmlElement): ...
class Dt(HtmlElement): ...
class Em(HtmlElement): ...
class Fieldset(HtmlElement): ...
class Figcaption(HtmlElement): ...
class Figure(HtmlElement): ...
class Footer(HtmlElement): ...
class Form(HtmlElement): ...
class H1(HtmlElement): ...
class H2(HtmlElement): ...
class H3(HtmlElement): ...
class H4(HtmlElement): ...
class H5(HtmlElement): ...
class H6(HtmlElement): ...
class Head(HtmlElement): ...
class Header(HtmlElement): ...
class Hgroup(HtmlElement): ...
class Html(HtmlElement): ...
class I(HtmlElement): ...
class Iframe(HtmlElement): ...
class Ins(HtmlElement): ...
class Kbd(HtmlElement): ...
class Label(HtmlElement): ...
class Legend(HtmlElement): ...
class Li(HtmlElement): ...
class Main(HtmlElement): ...
class Map(HtmlElement): ...
class Mark(HtmlElement): ...
class Math(HtmlElement): ...
class Menu(HtmlElement): ...
class Meter(HtmlElement): ...
class Nav(HtmlElement): ...
class Noscript(HtmlElement): ...
class Object(HtmlElement): ...
class Ol(HtmlElement): ...
class Optgroup(HtmlElement): ...
class Option(HtmlElement): ...
class Output(HtmlElement): ...
class P(HtmlElement): ...
class Picture(HtmlElement): ...
class Portal(HtmlElement): ...
class Pre(HtmlElement): ...
class Progress(HtmlElement): ...
class Q(HtmlElement): ...
class Rp(HtmlElement): ...
class Rt(HtmlElement): ...
class Ruby(HtmlElement): ...
class S(HtmlElement): ...
class Samp(HtmlElement): ...
class Script(HtmlElement): ...
class Section(HtmlElement): ...
class Select(HtmlElement): ...
class Slot(HtmlElement): ...
class Small(HtmlElement): ...
class Span(HtmlElement): ...
class Strong(HtmlElement): ...
class Style(HtmlElement): ...
class Sub(HtmlElement): ...
class Summary(HtmlElement): ...
class Sup(HtmlElement): ...
class Svg(HtmlElement): ...
class Table(HtmlElement): ...
class Tbody(HtmlElement): ...
class Td(HtmlElement): ...
class Template(HtmlElement): ...
class Textarea(HtmlElement): ...
class Tfoot(HtmlElement): ...
class Th(HtmlElement): ...
class Thead(HtmlElement): ...
class Time(HtmlElement): ...
class Title(HtmlElement): ...
class Tr(HtmlElement): ...
class U(HtmlElement): ...
class Ul(HtmlElement): ...
class Var(HtmlElement): ...
class Video(HtmlElement): ...
# fmt: on


# fmt: off
class Area(HtmlVoidElement): ...
class Base(HtmlVoidElement): ...
class Br(HtmlVoidElement): ...
class Col(HtmlVoidElement): ...
class Embed(HtmlVoidElement): ...
class Hr(HtmlVoidElement): ...
class Img(HtmlVoidElement): ...
class Input(HtmlVoidElement): ...
class Link(HtmlVoidElement): ...
class Meta(HtmlVoidElement): ...
class Source(HtmlVoidElement): ...
class Track(HtmlVoidElement): ...
class Wbr(HtmlVoidElement): ...
# fmt: on


if __name__ == "__main__":
    doc = Html({"lang": "en"})[
        Head()[
            Style()[
                "h1.title { text-align: center; }",
                ".recipient-name { font-weight: bold; }",
            ],
        ],
        Body()[
            H1({"class": "title"})["Example HTML Document"],
            P(dict(id="salutation"))[
                "Hello, ",
                Span({"class": "recipient-name"})["World"],
            ],
        ],
    ]
    for i, chunk in enumerate(doc.chunks(indent="  "), start=1):
        print(f"{i:>7}  {chunk}")
